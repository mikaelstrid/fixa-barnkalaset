{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/admin/main.ts","app/scripts/admin/pages/createArrangementPage.ts","app/scripts/admin/pages/createCityPage.ts","app/scripts/admin/pages/createOrEditArrangementPageBase.ts","app/scripts/admin/pages/createOrEditCityPageBase.ts","app/scripts/admin/pages/editArrangementPage.ts","app/scripts/admin/pages/editCityPage.ts","app/scripts/admin/utilities/constants.ts","app/scripts/admin/utilities/googleMapsUtilities.ts","app/scripts/admin/utilities/slugify.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","bootstrap","console","log","$","createCityPage_1","CreateCityPage","initPage","editCityPage","editCityPage_1","EditCityPage","data","createArrangementPage_1","CreateArrangementPage","editArrangementPage","editArrangementPage_1","EditArrangementPage","document","ready","createOrEditArrangementPageBase_1","slugify_1","_createOrEditArrangem","CreateOrEditArrangementPageBase","change","val","slugify","this","dropdown","CKEDITOR","replace","initMap","createOrEditCityPageBase_1","_createOrEditCityPage","CreateOrEditCityPageBase","constants_1","googleMapsUtilities_1","mapElement","geocoder","google","maps","Geocoder","map","Map","zoom","center","lat","lng","placesService","places","PlacesService","initialLatitude","initialLongitude","updateMap","LatLng","click","lookupAddress","_this","getLookupAddress","geocode","address","results","status","GeocoderStatus","OK","geometry","location","updateLatLngTextboxes","name","textSearch","query","PlacesServiceStatus","getDetails","placeId","place_id","place","detailedStatus","updateInformationFromGooglePlaces","url","attr","updateImageList","updateStreetAddress","address_components","updateAddressComponent","formatted_phone_number","website","text","get","slug","setCoverImage","listElementInDom","addClass","empty","photos","removeClass","_iteratorNormalCompletion","_step","_iterator","Symbol","iterator","next","done","photo","value","append","getUrl","maxWidth","maxHeight","makeAttributionsHtmlList","html_attributions","popup","_this2","updateCoverImageUrl","currentTarget","updateCoverImageAttributions","attributions","_step2","_iterator2","_iteratorNormalCompletion2","substring","addressComponents","googleName","fieldId","GoogleMapsUtilties","getAddressComponent","streetAddress","route","streetNumber","result","marker","setPosition","Marker","position","draggable","addListener","ev","_this3","latLng","setZoom","setCenter","toLocaleString","Constants","locale","maximumFractionDigits","latitude","longitude","componentName","addressComponent","j","types","long_name","p","RegExp","split","join","toString","toLowerCase","c","charAt","indexOf"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,gBCSA,SAAAK,IACIC,QAAQC,IAAI,uCAERC,EAAE,kCAAkCN,OAAS,IAC7CI,QAAQC,IAAI,wDACD,IAAIE,EAAcC,gBACxBC,WACLL,QAAQC,IAAI,+CAGhB,IAAIK,EAAeJ,EAAE,gCACjBI,EAAaV,OAAS,IACtBI,QAAQC,IAAI,sDACD,IAAIM,EAAYC,cACtBH,SAASC,EAAaG,KAAK,YAAaH,EAAaG,KAAK,cAC/DT,QAAQC,IAAI,6CAGZC,EAAE,wCAAwCN,OAAS,IACnDI,QAAQC,IAAI,+DACD,IAAIS,EAAqBC,uBAC/BN,WACLL,QAAQC,IAAI,sDAGhB,IAAIW,EAAsBV,EAAE,sCACxBU,EAAoBhB,OAAS,IAC7BI,QAAQC,IAAI,6DACD,IAAIY,EAAmBC,qBAC7BT,SAASO,EAAoBH,KAAK,YAAaG,EAAoBH,KAAK,cAC7ET,QAAQC,IAAI,oDAGhBD,QAAQC,IAAI,sFA1Cf,IAAAE,EAAAf,EAAwD,0BACzDmB,EAAAnB,EAAoD,wBACpDsB,EAAAtB,EAAsE,iCACtEyB,EAAAzB,EAAkE,+BAElEc,EAAEa,UAAUC,MAAM,WACdjB,sgCCNH,IAAAkB,EAAA7B,EAAoF,qCACrF8B,EAAA9B,EAA+C,wBAEZuB,EAAA,SAAAQ,kHAAQF,EAA+BG,uEAElElB,EAAE,SAASmB,OAAO,WACdnB,EAAE,SAASoB,IAAIJ,EAAOK,QAACrB,EAAEsB,MAAMF,UAEnCpB,EAAE,mBAAmBuB,WACrBC,SAASC,QAAQ,eACjBD,SAASC,QAAQ,qBAEjBH,KAAKI,gBATsB,GAAnClC,EAAAiB,sBAWCA,48BCdA,IAAAkB,EAAAzC,EAAsE,8BACvE8B,EAAA9B,EAA+C,wBAEnBgB,EAAA,SAAA0B,kHAAQD,EAAwBE,gEAEpD/B,QAAQC,IAAI,2BACZC,EAAE,SAASmB,OAAO,WACdnB,EAAE,SAASoB,IAAIJ,EAAOK,QAACrB,EAAEsB,MAAMF,UAGnCE,KAAKI,gBAPe,GAA5BlC,EAAAU,eASCA,ueCZA,IAAA4B,EAAA5C,EAAmD,0BACpD6C,EAAA7C,EAAsE,oCAcxDgC,EAAA,yFACNI,KAAKU,WAAahC,EAAE,QAAQ,GAC5BsB,KAAKW,SAAW,IAAIC,OAAOC,KAAKC,SAChCd,KAAKe,IAAA,IAAUH,OAAOC,KAAKG,IAAIhB,KAAKU,YAChCO,KAAM,EACNC,QAAUC,IAAK,GAAMC,IAAK,MAE9BpB,KAAKqB,cAAgB,IAAIT,OAAOC,KAAKS,OAAOC,cAAcvB,KAAKe,KAE3Df,KAAKwB,iBAAmBxB,KAAKyB,kBAC7BzB,KAAK0B,UAAU,IAAId,OAAOC,KAAKc,OAAO3B,KAAKwB,gBAAiBxB,KAAKyB,mBAGrE/C,EAAE,iCAAiCkD,MAAM,WACrC,IAAMC,EAAgBC,EAAKC,mBAS3B,OARAD,EAAKnB,SAASqB,SAAUC,QAAWJ,GAAiB,SAACK,EAASC,GACtDA,IAAWvB,OAAOC,KAAKuB,eAAeC,IACtCP,EAAKJ,UAAUQ,EAAQ,GAAGI,SAASC,UACnCT,EAAKU,sBAAsBN,EAAQ,GAAGI,SAASC,WAE/C/D,QAAQC,IAAA,iCAAqC0D,MAG9C,IAGXzD,EAAE,sCAAsCkD,MAAM,WAC1C,IAAMa,EAAO/D,EAAE,SAASoB,MACxB,QAAK2C,IACLX,EAAKT,cAAcqB,YAAaC,MAAOF,GACnC,SAACP,EAASC,GACN,GAAIA,IAAWvB,OAAOC,KAAKS,OAAOsB,oBAAoBP,GAAI,CACtD7D,QAAQC,IAAA,iBAAoBgE,EAAA,QAC5B,IAAK,IAAI5E,EAAI,EAAGA,EAAIqE,EAAQ9D,OAAQP,IAChCW,QAAQC,IAAA,KAASyD,EAAQrE,GAAG4E,MAEhCX,EAAKT,cAAcwB,YAAaC,QAASZ,EAAQ,GAAGa,UAChD,SAACC,EAAOC,GACAA,IAAmBrC,OAAOC,KAAKS,OAAOsB,oBAAoBP,GAC1DP,EAAKoB,kCAAkCF,GAEvCxE,QAAQC,IAAA,qCAAwCyD,EAAQ,GAAGa,SAAA,SAAiBE,EAAA,YAIxFzE,QAAQC,IAAA,sBAAyBgE,EAAA,SAAaN,EAAA,QAGnD,KAGXzD,EAAE,sBAAsBkD,MAAM,WAC1B,IAAIuB,EAAMzE,EAAE,eAAeoB,MAG3B,OAFIqD,GACAzE,EAAE,OAAO0E,KAAK,OAAQD,GAAKC,KAAK,SAAU,UAAU,GAAGxB,SACpD,IAGXlD,EAAE,iCAAiCkD,MAAM,WACrC,IAAIkB,EAAUpE,EAAE,mBAAmBoB,MACnC,OAAKgD,GAKLhB,EAAKT,cAAcwB,YAAaC,QAASA,GACrC,SAACE,EAAOC,GACAA,IAAmBrC,OAAOC,KAAKS,OAAOsB,oBAAoBP,GAC1DP,EAAKuB,gBAAgBL,GAAO,GAE5BxE,QAAQC,IAAA,qCAAwCqE,EAAA,SAAgBG,EAAA,QAIrE,IAbHzE,QAAQC,IAAI,kCACL,KAefC,EAAE,mBAAmBkD,MAAM,WAEvB,OADAlD,EAAE,OAAO0E,KAAK,OAAQ1E,EAAE,YAAYoB,OAAOsD,KAAK,SAAU,UAAU,GAAGxB,SAChE,8DAI2BoB,GACtCtE,EAAE,mBAAmBoB,IAAIkD,EAAMD,UAC/B/C,KAAKqD,gBAAgBL,GAAO,GAC5BhD,KAAKsD,oBAAoBN,EAAMO,mBAAoB,iBACnDvD,KAAKwD,uBAAuBR,EAAMO,mBAAoB,cAAe,cACrEvD,KAAKwD,uBAAuBR,EAAMO,mBAAoB,cAAe,cACrEvD,KAAKwD,uBAAuBR,EAAMO,mBAAoB,iBAAkB,iBAExE7E,EAAE,gBAAgBoB,IAAIkD,EAAMS,wBAC5B/E,EAAE,YAAYoB,IAAIkD,EAAMU,QAAQvD,QAAQ,OAAQ,KAE5C6C,EAAMV,UAAYU,EAAMV,SAASC,WACjCvC,KAAKwC,sBAAsBQ,EAAMV,SAASC,UAC1CvC,KAAK0B,UAAUsB,EAAMV,SAASC,WAGlC7D,EAAE,qBAAqBiF,KAAKX,EAAMP,MAElC/D,EAAEkF,IAAA,gCAAoCZ,EAAMV,SAASC,SAASpB,MAAA,cAAmB6B,EAAMV,SAASC,SAASnB,MACrG,SAAUnC,GACNP,EAAE,aAAaoB,IAAIb,EAAK4E,gDAIZb,EAAuCc,cACvDC,EAAmBrF,EAAE,8BAIzB,GAHAqF,EAAiBC,SAAS,UAC1BD,EAAiBE,QAEbjB,EAAMkB,OAAO9F,OAAS,EAAA,CACtB2F,EAAiBI,YAAY,UADJ,IAAAC,GAAA,oBAEzB,IAAA,IAAwBC,EAAxBC,EAAkBtB,EAAMkB,OAAAK,OAAAC,cAAAJ,GAAAC,EAAAC,EAAAG,QAAAC,MAAAN,GAAA,EAAA,CAAQ,IAAvBO,EAAAN,EAAAO,MACLb,EAAiBc,OAAA,8EAEAF,EAAMG,QAASC,SAAU,MAAA,UAAkBJ,EAAMG,QAASC,SAAU,IAAKC,UAAW,MAAA,qCACnFhF,KAAKiF,yBAAyBN,EAAMO,mBAAA,sGAG1DxG,EAAE,qCAAqCyG,QACvCzG,EAAE,qCAAqCkD,MAAM,SAACxE,GAG1C,OAFAgI,EAAKC,oBAAoB3G,EAAEtB,EAAEkI,eAAerG,KAAK,QACjDmG,EAAKG,6BAA6B7G,EAAEtB,EAAEkI,eAAerG,KAAK,UACnD,IAEP6E,IACA9D,KAAKqF,oBAAoBrC,EAAMkB,OAAO,GAAGY,QAASC,SAAU,OAC5D/E,KAAKuF,6BAA6BvF,KAAKiF,yBAAyBjC,EAAMkB,OAAO,GAAGgB,uEAK3DA,GAC7B,IAAIM,EAAe,0BACnB,IAAA,IAAmBC,EAAnBC,EAAmBR,EAAAX,OAAAC,cAAAmB,GAAAF,EAAAC,EAAAjB,QAAAC,MAAAiB,GAAA,EACfH,GADKC,EAAAb,MACc,kFAIvB,OAFIY,EAAapH,QAAU,IACvBoH,EAAeA,EAAaI,UAAU,EAAGJ,EAAapH,OAAS,IAC5DoH,EAAarF,QAAQ,KAAM,iDAGVgD,GACxBzE,EAAE,eAAeoB,IAAIqD,wDAGYqC,GACjC9G,EAAE,2BAA2BoB,IAAI0F,kDAGNK,EAA2DC,EAAoBC,GAC1G,IAAMnB,EAAQnE,EAAkBuF,mBAACC,oBAAoBJ,EAAmBC,GACpElB,GACAlG,EAAA,IAAMqH,GAAWjG,IAAI8E,+CAIDiB,EAA2DE,GACnF,IAAMG,EAAgBzF,EAAkBuF,mBAACC,oBAAoBJ,EAAmB,kBAC1EM,EAAQ1F,EAAkBuF,mBAACC,oBAAoBJ,EAAmB,SAClEO,EAAe3F,EAAkBuF,mBAACC,oBAAoBJ,EAAmB,iBAE3EQ,EAASH,GAAgCC,EACzCC,IACAC,EAASA,EAAS,IAAMD,GAE5B1H,EAAA,IAAMqH,GAAWjG,IAAIuG,8CAQrB,OAJsB3H,EAAE,kBAAkBoB,MAGjB,KAFNpB,EAAE,eAAeoB,MAEO,IADxBpB,EAAE,eAAeoB,wCAKtByC,cACVvC,KAAKsG,OACLtG,KAAKsG,OAAOC,YAAYhE,IAExBvC,KAAKsG,OAAA,IAAa1F,OAAOC,KAAK2F,QAC1BzF,IAAKf,KAAKe,IACV0F,SAAUlE,EACVmE,WAAW,IAEf1G,KAAKsG,OAAOK,YAAY,UAAW,SAAAC,GAC/BC,EAAKrE,sBAAsBoE,EAAGE,UAElC9G,KAAKe,IAAIgG,QAAQ,KAErB/G,KAAKe,IAAIiG,UAAUzE,iDAGOA,GAC1B7D,EAAE,aAAaoB,IAAIyC,EAASpB,MAAM8F,eAAezG,EAAS0G,UAACC,QAAUC,sBAAuB,MAC5F1I,EAAE,cAAcoB,IAAIyC,EAASnB,MAAM6F,eAAezG,EAAS0G,UAACC,QAAUC,sBAAuB,YAtMvF,GAZdlJ,EAAA0B,gCAoNCA,8eCvNA,IAAAY,EAAA5C,EAAmD,0BAatC2C,EAAA,yFACNP,KAAKU,WAAahC,EAAE,QAAQ,GAC5BsB,KAAKW,SAAW,IAAIC,OAAOC,KAAKC,SAChCd,KAAKe,IAAA,IAAUH,OAAOC,KAAKG,IAAIhB,KAAKU,YAChCO,KAAM,EACNC,QAAUC,IAAK,GAAMC,IAAK,MAG1BpB,KAAKwB,iBAAmBxB,KAAKyB,kBAC7BzB,KAAK0B,UAAU,IAAId,OAAOC,KAAKc,OAAO3B,KAAKwB,gBAAiBxB,KAAKyB,mBAGrE/C,EAAE,8BAA8BkD,MAAM,WAClC,IAAMC,EAAgBC,EAAKC,mBAS3B,OARAD,EAAKnB,SAASqB,SAAUC,QAAWJ,GAAiB,SAACK,EAASC,GACtDA,IAAWvB,OAAOC,KAAKuB,eAAeC,IACtCP,EAAKJ,UAAUQ,EAAQ,GAAGI,SAASC,UACnCT,EAAKU,sBAAsBN,EAAQ,GAAGI,SAASC,WAE/C/D,QAAQC,IAAA,iCAAqC0D,MAG9C,+CAKX,OAAOzD,EAAE,SAASoB,wCAGJyC,cACVvC,KAAKsG,OACLtG,KAAKsG,OAAOC,YAAYhE,IAExBvC,KAAKsG,OAAA,IAAa1F,OAAOC,KAAK2F,QAC1BzF,IAAKf,KAAKe,IACV0F,SAAUlE,EACVmE,WAAW,IAEf1G,KAAKsG,OAAOK,YAAY,UAAW,SAAAC,GAC/BxB,EAAK5C,sBAAsBoE,EAAGE,UAElC9G,KAAKe,IAAIgG,QAAQ,KAErB/G,KAAKe,IAAIiG,UAAUzE,iDAGOA,GAC1B7D,EAAE,aAAaoB,IAAIyC,EAASpB,MAAM8F,eAAezG,EAAS0G,UAACC,QAAUC,sBAAuB,MAC5F1I,EAAE,cAAcoB,IAAIyC,EAASnB,MAAM6F,eAAezG,EAAS0G,UAACC,QAAUC,sBAAuB,YAjDvF,GAXdlJ,EAAAqC,yBA8DCA,u6BChEA,IAAAd,EAAA7B,EAAoF,qCAGpD0B,EAAA,SAAAK,kHAAQF,EAA+BG,qEAC3DyH,EAAkBC,GACvB5I,EAAE,mBAAmBuB,WACrBC,SAASC,QAAQ,eACjBD,SAASC,QAAQ,qBACjBH,KAAKwB,gBAAkB6F,EACvBrH,KAAKyB,iBAAmB6F,EACxBtH,KAAKI,gBAPoB,GAAjClC,EAAAoB,oBASCA,k7BCZA,IAAAe,EAAAzC,EAAsE,8BAG7CoB,EAAA,SAAAsB,kHAAQD,EAAwBE,8DAC7C8G,EAAkBC,GACvB9I,QAAQC,IAAI,wBAAyB4I,EAAUC,GAC/CtH,KAAKwB,gBAAkB6F,EACvBrH,KAAKyB,iBAAmB6F,EACxBtH,KAAKI,gBALa,GAA1BlC,EAAAc,aAOCA,gNCVA,kCACUkI,EAAMC,OAAG,KADnBjJ,EAAAgJ,UAEAA,2aCFA,QACGlB,EAAA,6FAA2BH,EAA2D0B,GAClF,IAAK,IAAI1J,EAAI,EAAGA,EAAIgI,EAAkBzH,OAAQP,IAE1C,IAAK,IADC2J,EAAmB3B,EAAkBhI,GAClC4J,EAAI,EAAGA,EAAID,EAAiBE,MAAMtJ,OAAQqJ,IAC/C,GAAID,EAAiBE,MAAMD,KAAOF,EAC9B,OAAOC,EAAiBG,gBALxC,GADHzJ,EAAA8H,mBAYAA,yFCVD9H,EAAA6B,QAAA,SAAwB4D,GACpB,IAAMhG,EAAI,gDAEJiK,EAAI,IAAIC,OAAOlK,EAAEmK,MAAM,IAAIC,KAAK,KAAM,KAE5C,OAAApE,EAAYqE,WAAWC,cAClB9H,QAAQ,OAAQ,KAChBA,QAAQyH,EAAA,SAAAM,GACL,MANE,gDAOAC,OAAOxK,EAAEyK,QAAQF,MACtB/H,QAAQ,KAAM,SACdA,QAAQ,YAAa,IACrBA,QAAQ,SAAU,KAClBA,QAAQ,MAAO,IACfA,QAAQ,MAAO","file":"bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import { CreateCityPage } from \"./pages/createCityPage\";\r\nimport { EditCityPage } from \"./pages/editCityPage\";\r\nimport { CreateArrangementPage } from \"./pages/createArrangementPage\";\r\nimport { EditArrangementPage } from \"./pages/editArrangementPage\";\r\n\r\n$(document).ready(() => {\r\n    bootstrap();\r\n});\r\n\r\nfunction bootstrap() {\r\n    console.log(\"Starting bootstrapping procedure...\");\r\n\r\n    if ($(\".pxl-admin-page--cities-create\").length > 0) {\r\n        console.log(\"Found \\\"create city page\\\", start bootstrapping it...\");\r\n        let page = new CreateCityPage();\r\n        page.initPage();\r\n        console.log(\"Bootstrapping \\\"create city page\\\" finished.\");\r\n    }\r\n\r\n    let editCityPage = $(\".pxl-admin-page--cities-edit\");\r\n    if (editCityPage.length > 0) {\r\n        console.log(\"Found \\\"edit city page\\\", start bootstrapping it...\");\r\n        let page = new EditCityPage();\r\n        page.initPage(editCityPage.data(\"latitude\"), editCityPage.data(\"longitude\"));\r\n        console.log(\"Bootstrapping \\\"edit city page\\\" finished.\");\r\n    }\r\n\r\n    if ($(\".pxl-admin-page--arrangements-create\").length > 0) {\r\n        console.log(\"Found \\\"create arrangement page\\\", start bootstrapping it...\");\r\n        let page = new CreateArrangementPage();\r\n        page.initPage();\r\n        console.log(\"Bootstrapping \\\"create arrangement page\\\" finished.\");\r\n    }\r\n\r\n    let editArrangementPage = $(\".pxl-admin-page--arrangements-edit\");\r\n    if (editArrangementPage.length > 0) {\r\n        console.log(\"Found \\\"edit arrangement page\\\", start bootstrapping it...\");\r\n        let page = new EditArrangementPage();\r\n        page.initPage(editArrangementPage.data(\"latitude\"), editArrangementPage.data(\"longitude\"));\r\n        console.log(\"Bootstrapping \\\"edit arrangement page\\\" finished.\");\r\n    }\r\n\r\n    console.log(\"Bootstrapping procedure finished.\");\r\n}","﻿import { CreateOrEditArrangementPageBase } from \"./createOrEditArrangementPageBase\";\r\nimport { slugify } from \"../utilities/slugify\";\r\n\r\nexport class CreateArrangementPage extends CreateOrEditArrangementPageBase {\r\n    initPage() {\r\n        $(\"#Name\").change(function () {\r\n            $(\"#Slug\").val(slugify($(this).val()));\r\n        });\r\n        $(\"select.dropdown\").dropdown();\r\n        CKEDITOR.replace(\"Description\");\r\n        CKEDITOR.replace(\"BookingConditions\");\r\n\r\n        this.initMap();\r\n    }\r\n}","﻿import { CreateOrEditCityPageBase } from \"./createOrEditCityPageBase\";\r\nimport { slugify } from \"../utilities/slugify\";\r\n\r\nexport class CreateCityPage extends CreateOrEditCityPageBase {\r\n    initPage() {\r\n        console.log(\"CreateCityPage.initPage\")\r\n        $(\"#Name\").change(function () {\r\n            $(\"#Slug\").val(slugify($(this).val()));\r\n        });\r\n\r\n        this.initMap();\r\n    }\r\n}","﻿import { Constants } from \"../utilities/constants\";\r\nimport { GoogleMapsUtilties } from \"../utilities/googleMapsUtilities\";\r\n\r\nexport abstract class CreateOrEditArrangementPageBase {\r\n\r\n    private mapElement: HTMLElement;\r\n\r\n    private map: google.maps.Map;\r\n    private marker: google.maps.Marker;\r\n    private geocoder: google.maps.Geocoder;\r\n    private placesService: google.maps.places.PlacesService;\r\n\r\n    protected initialLatitude: number;\r\n    protected initialLongitude: number;\r\n\r\n    protected initMap() {\r\n        this.mapElement = $(\"#map\")[0];\r\n        this.geocoder = new google.maps.Geocoder();\r\n        this.map = new google.maps.Map(this.mapElement, {\r\n            zoom: 4,\r\n            center: { lat: 63.0, lng: 17.0 }\r\n        });\r\n        this.placesService = new google.maps.places.PlacesService(this.map);\r\n\r\n        if (this.initialLatitude && this.initialLongitude) {\r\n            this.updateMap(new google.maps.LatLng(this.initialLatitude, this.initialLongitude));\r\n        }\r\n\r\n        $(\"#btnGetCoordinatesFromAddress\").click(() => {\r\n            const lookupAddress = this.getLookupAddress();\r\n            this.geocoder.geocode({ 'address': lookupAddress }, (results, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    this.updateMap(results[0].geometry.location);\r\n                    this.updateLatLngTextboxes(results[0].geometry.location);\r\n                } else {\r\n                    console.log(`Kunde inte hitta position pga ${status}`);\r\n                }\r\n            });\r\n            return false;\r\n        });\r\n\r\n        $(\"#btnGetInformationFromGooglePlaces\").click(() => {\r\n            const name = $(\"#Name\").val();\r\n            if (!name) return false;\r\n            this.placesService.textSearch({ query: name },\r\n                (results, status) => {\r\n                    if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n                        console.log(`\"Träffar på '${name}':\"`);\r\n                        for (let i = 0; i < results.length; i++) {\r\n                            console.log(`\\t${results[i].name}`);\r\n                        }\r\n                        this.placesService.getDetails({ placeId: results[0].place_id },\r\n                            (place, detailedStatus) => {\r\n                                if (detailedStatus === google.maps.places.PlacesServiceStatus.OK) {\r\n                                    this.updateInformationFromGooglePlaces(place);\r\n                                } else {\r\n                                    console.log(`\"Kunde inte hämta detailjer för '${results[0].place_id}' pga ${detailedStatus}\"`);\r\n                                }\r\n                            });\r\n                    } else {\r\n                        console.log(`\"Inga träffar på '${name}' pga ${status}\"`);\r\n                    }\r\n                });\r\n            return false;\r\n        });\r\n\r\n        $(\"#btnOpenCoverImage\").click(() => {\r\n            var url = $(\"#CoverImage\").val();\r\n            if (url) \r\n                $(\"<a>\").attr(\"href\", url).attr(\"target\", \"_blank\")[0].click();\r\n            return false;\r\n        });\r\n\r\n        $(\"#btnGetImagesFromGooglePlaces\").click(() => {\r\n            var placeId = $(\"#GooglePlacesId\").val();\r\n            if (!placeId) {\r\n                console.log(\"No Google Places id specified\")\r\n                return false;\r\n            }\r\n\r\n            this.placesService.getDetails({ placeId: placeId },\r\n                (place, detailedStatus) => {\r\n                    if (detailedStatus === google.maps.places.PlacesServiceStatus.OK) {\r\n                        this.updateImageList(place, false);\r\n                    } else {\r\n                        console.log(`\"Kunde inte hämta detailjer för '${placeId}' pga ${detailedStatus}\"`);\r\n                    }\r\n                });\r\n\r\n            return false;\r\n        });\r\n\r\n        $(\"#btnOpenWebsite\").click(() => {\r\n            $(\"<a>\").attr(\"href\", $(\"#Website\").val()).attr(\"target\", \"_blank\")[0].click();\r\n            return false;\r\n        });\r\n    }\r\n\r\n    private updateInformationFromGooglePlaces(place: google.maps.places.PlaceResult): void {\r\n        $(\"#GooglePlacesId\").val(place.place_id);\r\n        this.updateImageList(place, true);\r\n        this.updateStreetAddress(place.address_components, \"StreetAddress\");\r\n        this.updateAddressComponent(place.address_components, \"postal_code\", \"PostalCode\");\r\n        this.updateAddressComponent(place.address_components, \"postal_town\", \"PostalCity\");\r\n        this.updateAddressComponent(place.address_components, \"street_address\", \"StreetAddress\");\r\n\r\n        $(\"#PhoneNumber\").val(place.formatted_phone_number);\r\n        $(\"#Website\").val(place.website.replace(/\\/+$/, \"\"));\r\n\r\n        if (place.geometry && place.geometry.location) {\r\n            this.updateLatLngTextboxes(place.geometry.location);\r\n            this.updateMap(place.geometry.location);\r\n        }\r\n\r\n        $(\"#GooglePlacesName\").text(place.name);\r\n\r\n        $.get(`/api/cities/closest?latitude=${place.geometry.location.lat()}&longitude=${place.geometry.location.lng()}`,\r\n            function (data) {\r\n                $(\"#CitySlug\").val(data.slug);\r\n            });\r\n    }\r\n\r\n    private updateImageList(place: google.maps.places.PlaceResult, setCoverImage: boolean) {\r\n        let listElementInDom = $(\"#lstImagesFromGooglePlaces\");\r\n        listElementInDom.addClass(\"hidden\");\r\n        listElementInDom.empty();\r\n\r\n        if (place.photos.length > 0) {\r\n            listElementInDom.removeClass(\"hidden\");\r\n            for (let photo of place.photos) {\r\n                listElementInDom.append(`<img \r\n                    class=\\\"ui image\\\"\r\n                    data-url=\\\"${photo.getUrl({ maxWidth: 812 })}\\\" src=\\\"${photo.getUrl({ maxWidth: 600, maxHeight: 600 })}\\\"\r\n                    data-html=\\\"${this.makeAttributionsHtmlList(photo.html_attributions)}\\\"\r\n                >`);\r\n            }\r\n            $(\"#lstImagesFromGooglePlaces .image\").popup();\r\n            $(\"#lstImagesFromGooglePlaces .image\").click((e) => {\r\n                this.updateCoverImageUrl($(e.currentTarget).data(\"url\"));\r\n                this.updateCoverImageAttributions($(e.currentTarget).data(\"html\"))\r\n                return false;\r\n            });\r\n            if (setCoverImage) {\r\n                this.updateCoverImageUrl(place.photos[0].getUrl({ maxWidth: 812 }));\r\n                this.updateCoverImageAttributions(this.makeAttributionsHtmlList(place.photos[0].html_attributions));\r\n            }\r\n        }\r\n    }\r\n\r\n    private makeAttributionsHtmlList(html_attributions: string[]): string {\r\n        let attributions = \"\";\r\n        for (let attrib of html_attributions) {\r\n            attributions += `${attrib}, `;\r\n        }\r\n        if (attributions.length >= 2)\r\n            attributions = attributions.substring(0, attributions.length - 2);\r\n        return attributions.replace(/\"/g, \"'\");\r\n    }\r\n\r\n    private updateCoverImageUrl(url: string) {\r\n        $(\"#CoverImage\").val(url);\r\n    }\r\n\r\n    private updateCoverImageAttributions(attributions: string) {\r\n        $(\"#CoverImageAttributions\").val(attributions);\r\n    }\r\n\r\n    private updateAddressComponent(addressComponents: google.maps.GeocoderAddressComponent[], googleName: string, fieldId: string): void {\r\n        const value = GoogleMapsUtilties.getAddressComponent(addressComponents, googleName);\r\n        if (value) {\r\n            $(`#${fieldId}`).val(value);\r\n        }\r\n    }\r\n\r\n    private updateStreetAddress(addressComponents: google.maps.GeocoderAddressComponent[], fieldId: string): void {\r\n        const streetAddress = GoogleMapsUtilties.getAddressComponent(addressComponents, \"street_address\");\r\n        const route = GoogleMapsUtilties.getAddressComponent(addressComponents, \"route\");\r\n        const streetNumber = GoogleMapsUtilties.getAddressComponent(addressComponents, \"street_number\");\r\n\r\n        let result = streetAddress ? streetAddress : route;\r\n        if (streetNumber)\r\n            result = result + \" \" + streetNumber;\r\n\r\n        $(`#${fieldId}`).val(result);\r\n    }\r\n\r\n    private getLookupAddress(): string {\r\n        const streetAddress = $(\"#StreetAddress\").val();\r\n        const postalCode = $(\"#PostalCode\").val();\r\n        const postalCity = $(\"#PostalCity\").val();\r\n        const lookupAddress = `${streetAddress}, ${postalCode} ${postalCity}`;\r\n        return lookupAddress;\r\n    }\r\n\r\n    private updateMap(location: google.maps.LatLng): void {\r\n        if (this.marker) {\r\n            this.marker.setPosition(location);\r\n        } else {\r\n            this.marker = new google.maps.Marker({\r\n                map: this.map,\r\n                position: location,\r\n                draggable: true\r\n            });\r\n            this.marker.addListener(\"dragend\", ev => {\r\n                this.updateLatLngTextboxes(ev.latLng);\r\n            });\r\n            this.map.setZoom(11);\r\n        }\r\n        this.map.setCenter(location);\r\n    }\r\n\r\n    private updateLatLngTextboxes(location: google.maps.LatLng): void  {\r\n        $(\"#Latitude\").val(location.lat().toLocaleString(Constants.locale, { maximumFractionDigits: 14 }));\r\n        $(\"#Longitude\").val(location.lng().toLocaleString(Constants.locale, { maximumFractionDigits: 14 }));\r\n    }\r\n}","﻿import { Constants } from \"../utilities/constants\";\r\n\r\nexport abstract class CreateOrEditCityPageBase {\r\n\r\n    private mapElement: HTMLElement;\r\n\r\n    private map: google.maps.Map;\r\n    private marker: google.maps.Marker;\r\n    private geocoder: google.maps.Geocoder;\r\n\r\n    protected initialLatitude: number;\r\n    protected initialLongitude: number;\r\n\r\n    protected initMap() {\r\n        this.mapElement = $(\"#map\")[0];\r\n        this.geocoder = new google.maps.Geocoder();\r\n        this.map = new google.maps.Map(this.mapElement, {\r\n            zoom: 4,\r\n            center: { lat: 63.0, lng: 17.0 }\r\n        });\r\n\r\n        if (this.initialLatitude && this.initialLongitude) {\r\n            this.updateMap(new google.maps.LatLng(this.initialLatitude, this.initialLongitude));\r\n        }\r\n\r\n        $(\"#btnGetCoordinatesFromName\").click(() => {\r\n            const lookupAddress = this.getLookupAddress();\r\n            this.geocoder.geocode({ 'address': lookupAddress }, (results, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    this.updateMap(results[0].geometry.location);\r\n                    this.updateLatLngTextboxes(results[0].geometry.location);\r\n                } else {\r\n                    console.log(`Kunde inte hitta position pga ${status}`);\r\n                }\r\n            });\r\n            return false;\r\n        });\r\n    }\r\n\r\n    private getLookupAddress(): string {\r\n        return $(\"#Name\").val();\r\n    }\r\n\r\n    private updateMap(location: google.maps.LatLng): void {\r\n        if (this.marker) {\r\n            this.marker.setPosition(location);\r\n        } else {\r\n            this.marker = new google.maps.Marker({\r\n                map: this.map,\r\n                position: location,\r\n                draggable: true\r\n            });\r\n            this.marker.addListener(\"dragend\", ev => {\r\n                this.updateLatLngTextboxes(ev.latLng);\r\n            });\r\n            this.map.setZoom(11);\r\n        }\r\n        this.map.setCenter(location);\r\n    }\r\n\r\n    private updateLatLngTextboxes(location: google.maps.LatLng): void  {\r\n        $(\"#Latitude\").val(location.lat().toLocaleString(Constants.locale, { maximumFractionDigits: 14 }));\r\n        $(\"#Longitude\").val(location.lng().toLocaleString(Constants.locale, { maximumFractionDigits: 14 }));\r\n    }\r\n}","﻿import { CreateOrEditArrangementPageBase } from \"./createOrEditArrangementPageBase\";\r\nimport { slugify } from \"../utilities/slugify\";\r\n\r\nexport class EditArrangementPage extends CreateOrEditArrangementPageBase {\r\n    initPage(latitude: number, longitude: number) {\r\n        $(\"select.dropdown\").dropdown();\r\n        CKEDITOR.replace(\"Description\");\r\n        CKEDITOR.replace(\"BookingConditions\");\r\n        this.initialLatitude = latitude;\r\n        this.initialLongitude = longitude;\r\n        this.initMap();\r\n    }\r\n}","﻿import { CreateOrEditCityPageBase } from \"./createOrEditCityPageBase\";\r\nimport { slugify } from \"../utilities/slugify\";\r\n\r\nexport class EditCityPage extends CreateOrEditCityPageBase {\r\n    initPage(latitude: number, longitude: number) {\r\n        console.log(\"EditCityPage.initPage\", latitude, longitude)\r\n        this.initialLatitude = latitude;\r\n        this.initialLongitude = longitude;\r\n        this.initMap();\r\n    }\r\n}","﻿export class Constants {\r\n    static locale = \"sv\";\r\n}","﻿export class GoogleMapsUtilties {\r\n    static getAddressComponent(addressComponents: google.maps.GeocoderAddressComponent[], componentName: string): string {\r\n        for (let i = 0; i < addressComponents.length; i++) {\r\n            const addressComponent = addressComponents[i];\r\n            for (let j = 0; j < addressComponent.types.length; j++) {\r\n                if (addressComponent.types[j] === componentName) {\r\n                    return addressComponent.long_name;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n}","﻿// https://gist.github.com/mathewbyrne/1280286\r\n\r\nexport function slugify(text: string) {\r\n    const a = \"àáåäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;\";\r\n    const b = \"aaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------\";\r\n    const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\r\n\r\n    return text.toString().toLowerCase()\r\n        .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n        .replace(p,\r\n            c =>\r\n            b.charAt(a.indexOf(c))) // Replace special chars\r\n        .replace(/&/g, \"-and-\")     // Replace & with 'and'\r\n        .replace(/[^\\w\\-]+/g, \"\")   // Remove all non-word chars\r\n        .replace(/\\-\\-+/g, \"-\")     // Replace multiple - with single -\r\n        .replace(/^-+/, \"\")         // Trim - from start of text\r\n        .replace(/-+$/, \"\");        // Trim - from end of text\r\n}"]}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/admin/main.ts","app/scripts/admin/pages/createCityPage.ts","app/scripts/admin/pages/createOrEditCityPageBase.ts","app/scripts/admin/pages/editCityPage.ts","app/scripts/admin/utilities/constants.ts","app/scripts/admin/utilities/slugify.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","bootstrap","console","log","$","createCityPage_1","CreateCityPage","initPage","editCityPage","editCityPage_1","EditCityPage","data","document","ready","createOrEditCityPageBase_1","slugify_1","_createOrEditCityPage","CreateOrEditCityPageBase","change","val","slugify","this","initMap","constants_1","mapElement","geocoder","google","maps","Geocoder","map","Map","zoom","center","lat","lng","initialLatitude","initialLongitude","updateMap","LatLng","click","lookupAddress","_this","getLookupAddress","geocode","address","results","status","GeocoderStatus","OK","geometry","location","updateLatLngTextboxes","marker","setPosition","Marker","position","draggable","addListener","ev","_this2","latLng","setZoom","setCenter","toLocaleString","Constants","locale","maximumFractionDigits","latitude","longitude","text","p","RegExp","split","join","toString","toLowerCase","replace","c","charAt","indexOf"],"mappings":"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","file":"bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import { CreateCityPage } from \"./pages/createCityPage\";\r\nimport { EditCityPage } from \"./pages/editCityPage\";\r\n\r\n$(document).ready(() => {\r\n    bootstrap();\r\n});\r\n\r\nfunction bootstrap() {\r\n    console.log(\"Starting bootstrapping procedure...\");\r\n\r\n    if ($(\".pxl-admin-page--cities-create\").length > 0) {\r\n        console.log(\"Found \\\"create city page\\\", start bootstrapping it...\");\r\n        let page = new CreateCityPage();\r\n        page.initPage();\r\n        console.log(\"Bootstrapping \\\"create city page\\\" finished.\");\r\n    }\r\n\r\n    let editCityPage = $(\".pxl-admin-page--cities-edit\");\r\n    if (editCityPage.length > 0) {\r\n        console.log(\"Found \\\"edit city page\\\", start bootstrapping it...\");\r\n        let page = new EditCityPage();\r\n        page.initPage(editCityPage.data(\"latitude\"), editCityPage.data(\"longitude\"));\r\n        console.log(\"Bootstrapping \\\"edit city page\\\" finished.\");\r\n    }\r\n\r\n    console.log(\"Bootstrapping procedure finished.\");\r\n}","﻿import { CreateOrEditCityPageBase } from \"./createOrEditCityPageBase\";\r\nimport { slugify } from \"../utilities/slugify\";\r\n\r\nexport class CreateCityPage extends CreateOrEditCityPageBase {\r\n    initPage() {\r\n        console.log(\"CreateCityPage.initPage\")\r\n        $(\"#Name\").change(function () {\r\n            $(\"#Slug\").val(slugify($(this).val()));\r\n        });\r\n\r\n        this.initMap();\r\n    }\r\n}","﻿import { Constants } from \"../utilities/constants\";\r\n\r\nexport abstract class CreateOrEditCityPageBase {\r\n\r\n    private mapElement: HTMLElement;\r\n\r\n    private map: google.maps.Map;\r\n    private marker: google.maps.Marker;\r\n    private geocoder: google.maps.Geocoder;\r\n\r\n    protected initialLatitude: number;\r\n    protected initialLongitude: number;\r\n\r\n    protected initMap() {\r\n        this.mapElement = $(\"#map\")[0];\r\n        this.geocoder = new google.maps.Geocoder();\r\n        this.map = new google.maps.Map(this.mapElement, {\r\n            zoom: 4,\r\n            center: { lat: 63.0, lng: 17.0 }\r\n        });\r\n\r\n        if (this.initialLatitude && this.initialLongitude) {\r\n            this.updateMap(new google.maps.LatLng(this.initialLatitude, this.initialLongitude));\r\n        }\r\n\r\n        $(\"#btnGetCoordinatesFromName\").click(() => {\r\n            const lookupAddress = this.getLookupAddress();\r\n            this.geocoder.geocode({ 'address': lookupAddress }, (results, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    this.updateMap(results[0].geometry.location);\r\n                    this.updateLatLngTextboxes(results[0].geometry.location);\r\n                } else {\r\n                    console.log(`Kunde inte hitta position pga ${status}`);\r\n                }\r\n            });\r\n            return false;\r\n        });\r\n    }\r\n\r\n    private getLookupAddress(): string {\r\n        return $(\"#Name\").val();\r\n    }\r\n\r\n    private updateMap(location: google.maps.LatLng): void {\r\n        if (this.marker) {\r\n            this.marker.setPosition(location);\r\n        } else {\r\n            this.marker = new google.maps.Marker({\r\n                map: this.map,\r\n                position: location,\r\n                draggable: true\r\n            });\r\n            this.marker.addListener(\"dragend\", ev => {\r\n                this.updateLatLngTextboxes(ev.latLng);\r\n            });\r\n            this.map.setZoom(11);\r\n        }\r\n        this.map.setCenter(location);\r\n    }\r\n\r\n    private updateLatLngTextboxes(location: google.maps.LatLng): void  {\r\n        $(\"#Latitude\").val(location.lat().toLocaleString(Constants.locale, { maximumFractionDigits: 14 }));\r\n        $(\"#Longitude\").val(location.lng().toLocaleString(Constants.locale, { maximumFractionDigits: 14 }));\r\n    }\r\n}","﻿import { CreateOrEditCityPageBase } from \"./createOrEditCityPageBase\";\r\nimport { slugify } from \"../utilities/slugify\";\r\n\r\nexport class EditCityPage extends CreateOrEditCityPageBase {\r\n    initPage(latitude: number, longitude: number) {\r\n        console.log(\"EditCityPage.initPage\", latitude, longitude)\r\n        this.initialLatitude = latitude;\r\n        this.initialLongitude = longitude;\r\n        this.initMap();\r\n    }\r\n}","﻿export class Constants {\r\n    static locale = \"sv\";\r\n}","﻿// https://gist.github.com/mathewbyrne/1280286\r\n\r\nexport function slugify(text: string) {\r\n    const a = \"àáåäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;\";\r\n    const b = \"aaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------\";\r\n    const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\r\n\r\n    return text.toString().toLowerCase()\r\n        .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n        .replace(p,\r\n            c =>\r\n            b.charAt(a.indexOf(c))) // Replace special chars\r\n        .replace(/&/g, \"-and-\")     // Replace & with 'and'\r\n        .replace(/[^\\w\\-]+/g, \"\")   // Remove all non-word chars\r\n        .replace(/\\-\\-+/g, \"-\")     // Replace multiple - with single -\r\n        .replace(/^-+/, \"\")         // Trim - from start of text\r\n        .replace(/-+$/, \"\");        // Trim - from end of text\r\n}"]}